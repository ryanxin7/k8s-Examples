#################################################################################################################
# Define the settings for the rook-ceph cluster with common settings for a production cluster.
# All nodes with available raw devices will be used for the Ceph cluster. At least three nodes are required
# in this example. See the documentation for more details on storage settings available.

# For example, to create the cluster:
#   kubectl create -f crds.yaml -f common.yaml -f operator.yaml
#   kubectl create -f cluster.yaml
#################################################################################################################

apiVersion: ceph.rook.io/v1
kind: CephCluster
metadata:
  name: rook-ceph
  namespace: rook-ceph # namespace:cluster
spec:
  cephVersion:
    # 用于启动 Ceph 守护进程 pod（mon、mgr、osd、mds、rgw）的容器镜像。
    # v16 是 Pacific 版本，v17 是 Quincy 版本。
    # 推荐：在生产环境中，使用特定版本标签而不是通用的 v17 标签，因为 v17 会拉取最新版本，
    # 这可能会导致集群中运行不同的版本。可在 https://hub.docker.com/r/ceph/ceph/tags/ 查看可用的标签。
    # 如果希望更精确，可以使用带时间戳的标签，例如 quay.io/ceph/ceph:v17.2.6-20230410
    # 该标签可能不包含新的 Ceph 版本，仅包含基础操作系统的安全修复，从而减少漏洞。
    image: registry.cn-beijing.aliyuncs.com/xxk8s/ceph:v17.2.6
    # quay.io/ceph/ceph:v17.2.6
    # 是否允许使用 Ceph 的不受支持版本。目前支持的版本有 `pacific`、`quincy` 和 `reef`。
    # 将来的版本如 `squid` (v19) 需要将此设置为 `true`。
    # 不要在生产环境中设置为 true。
    allowUnsupported: false
    # 主机上用于持久化配置文件的路径。必须指定。
    # 重要提示：如果重新安装集群，请确保从每个主机中删除此目录，否则新的集群中的 mon 将无法启动。
    # 在 Minikube 中，配置 '/data' 目录在重启后仍会保留。在 Minikube 环境中使用 "/data/rook"。
  dataDirHostPath: /var/lib/rook
    # 是否在检查失败的情况下继续升级
    # 这意味着 Ceph 的状态可能已降级，我们不建议升级，但您可以自行决定
    # 使用时请自行承担风险
    # 了解 Rook 的 Ceph 升级过程，请阅读 https://rook.io/docs/rook/latest/ceph-upgrade.html#ceph-version-upgrades
  skipUpgradeChecks: false
  # 在升级过程中，即使 PGs 未清理干净，是否继续
  continueUpgradeAfterChecksEvenIfNotHealthy: false
  # WaitTimeoutForHealthyOSDInMinutes 定义操作员在 OSD 可以停止进行升级或重启之前等待的时间（以分钟为单位）。
  # 如果超时且 OSD 不允许停止，则操作员会跳过当前 OSD 的升级并继续下一个，
  # 如果 `continueUpgradeAfterChecksEvenIfNotHealthy` 为 `false`。如果 `continueUpgradeAfterChecksEvenIfNotHealthy` 为 `true`，
  # 即使超时后仍不允许停止，操作员也会继续升级 OSD。如果 `skipUpgradeChecks` 为 `true`，则不会应用此超时。
  waitTimeoutForHealthyOSDInMinutes: 10
  mon:
    # 设置要启动的 mon 的数量。通常建议为 3。
    # 为了获得最高的可用性，应指定奇数个 mon。
    count: 3
    # mon 应该在不同的节点上。出于生产环境的原因，至少推荐 3 个节点。
    # mon 仅应在测试环境中允许在相同节点上，此情况下数据丢失是可以接受的。
    allowMultiplePerNode: false
  mgr:
    # 当需要更高的 mgr 可用性时，将数量增加到 2。
    # 在这种情况下，一个 mgr 将处于活动状态，另一个处于备用状态。当 Ceph 更新
    # 哪个 mgr 是活动的时，Rook 会更新 mgr 服务以匹配活动的 mgr。
    count: 2
    allowMultiplePerNode: false
    modules:
      # Several modules should not need to be included in this list. The "dashboard" and "monitoring" modules
      # are already enabled by other settings in the cluster CR.
      - name: pg_autoscaler
        enabled: true
  # 启用 Ceph 仪表板以查看集群状态
  dashboard:
    enabled: true
      # 在子路径下提供仪表板服务（当您通过反向代理访问仪表板时非常有用）
      # urlPrefix: /ceph-dashboard
      # 在给定端口提供仪表板服务。
      # port: 8443
      # 使用 SSL 提供仪表板服务
    ssl: true
    # Prometheus 实例的 URL
    # prometheusEndpoint: <protocol>://<prometheus-host>:<port>
    # 如果 Prometheus 服务器使用 https，是否应验证 SSL
    # prometheusEndpointSSLVerify: false
    # 为集群启用 Prometheus 警报
  monitoring:
    # 需要预先安装 Prometheus
    enabled: false
    # 是否禁用 Ceph 报告的指标。如果为 false，则启用 prometheus mgr 模块和 Ceph exporter。
    # 如果为 true，则 prometheus mgr 模块和 Ceph exporter 都被禁用。默认值为 false。
    metricsDisabled: false
  network:
    connections:
    # 是否加密传输中的数据，以防止网络上的数据被窃听。
    # 默认值为 false。当启用加密时，客户端与 Ceph 守护进程之间或 Ceph 守护进程之间的所有通信都将被加密。
    # 当未启用加密时，客户端仍然会建立强大的初始身份验证，并且数据完整性仍然会通过 CRC 校验进行验证。
    # 重要提示：加密需要 5.11 内核以支持最新的 nbd 和 cephfs 驱动程序。或者，仅用于测试，
    # 您可以在 rbd 存储类中设置 "mounter: rbd-nbd"，或在 cephfs 存储类中设置 "mounter: fuse"。
    # nbd 和 fuse 驱动程序在生产环境中不推荐使用，因为重新启动 CSI 驱动程序 Pod 将断开卷连接。
      encryption:
        enabled: false
      # 是否压缩传输中的数据。默认值为 false。
      # Requires Ceph Quincy (v17) or newer. Also see the kernel requirements above for encryption.
      compression:
        enabled: false
      # Whether to require communication over msgr2. If true, the msgr v1 port (6789) will be disabled
      # and clients will be required to connect to the Ceph cluster with the v2 port (3300).
      # Requires a kernel that supports msgr v2 (kernel 5.11 or CentOS 8.4 or newer).
      requireMsgr2: false
    # enable host networking
    #provider: host
    # enable the Multus network provider
    #provider: multus
    #selectors:
    #  The selector keys are required to be `public` and `cluster`.
    #  Based on the configuration, the operator will do the following:
    #    1. if only the `public` selector key is specified both public_network and cluster_network Ceph settings will listen on that interface
    #    2. if both `public` and `cluster` selector keys are specified the first one will point to 'public_network' flag and the second one to 'cluster_network'
    #
    #  In order to work, each selector value must match a NetworkAttachmentDefinition object in Multus
    #
    #  public: public-conf --> NetworkAttachmentDefinition object name in Multus
    #  cluster: cluster-conf --> NetworkAttachmentDefinition object name in Multus
    # Provide internet protocol version. IPv6, IPv4 or empty string are valid options. Empty string would mean IPv4
    #ipFamily: "IPv6"
    # Ceph daemons to listen on both IPv4 and Ipv6 networks
    #dualStack: false
    # Enable multiClusterService to export the mon and OSD services to peer cluster.
    # This is useful to support RBD mirroring between two clusters having overlapping CIDRs.
    # Ensure that peer clusters are connected using an MCS API compatible application, like Globalnet Submariner.
    #multiClusterService:
    #  enabled: false

  # enable the crash collector for ceph daemon crash collection
  crashCollector:
    disable: false
   # 取消注释 daysToRetain 以清理超过指定天数的 Ceph 崩溃条目。
    #daysToRetain: 30
  
  # 启用日志收集器，守护进程将记录日志并进行日志轮替
  logCollector:
    enabled: true
    periodicity: daily # one of: hourly, daily, weekly, monthly
    maxLogSize: 500M # SUFFIX may be 'M' or 'G'. Must be at least 1M.
  # automate [data cleanup process](https://github.com/rook/rook/blob/master/Documentation/Storage-Configuration/ceph-teardown.md#delete-the-data-on-hosts) in cluster destruction.
  cleanupPolicy:
    # Since cluster cleanup is destructive to data, confirmation is required.
    # To destroy all Rook data on hosts during uninstall, confirmation must be set to "yes-really-destroy-data".
    # This value should only be set when the cluster is about to be deleted. After the confirmation is set,
    # Rook will immediately stop configuring the cluster and only wait for the delete command.
    # If the empty string is set, Rook will not destroy any data on hosts during uninstall.
    confirmation: ""
    # sanitizeDisks represents settings for sanitizing OSD disks on cluster deletion
    sanitizeDisks:
      # method indicates if the entire disk should be sanitized or simply ceph's metadata
      # in both case, re-install is possible
      # possible choices are 'complete' or 'quick' (default)
      method: quick
      # dataSource indicate where to get random bytes from to write on the disk
      # possible choices are 'zero' (default) or 'random'
      # using random sources will consume entropy from the system and will take much more time then the zero source
      dataSource: zero
      # iteration overwrite N times instead of the default (1)
      # takes an integer value
      iteration: 1
    # allowUninstallWithVolumes defines how the uninstall should be performed
    # If set to true, cephCluster deletion does not wait for the PVs to be deleted.
    allowUninstallWithVolumes: false
   # 要控制各种服务在 Kubernetes 上的调度位置，请使用下面的 placement 配置部分。
   # 在 'all' 下的示例中，所有服务将调度到带有标签 'role=storage-node' 的 Kubernetes 节点上，
   # 并容忍键为 'storage-node' 的污点。
  # placement:
  #   all:
  #     nodeAffinity:
  #       requiredDuringSchedulingIgnoredDuringExecution:
  #         nodeSelectorTerms:
  #         - matchExpressions:
  #           - key: role
  #             operator: In
  #             values:
  #             - storage-node
  #     podAffinity:
  #     podAntiAffinity:
  #     topologySpreadConstraints:
  #     tolerations:
  #     - key: storage-node
  #       operator: Exists
  # 上述的调度信息也可以为 mon、osd 和 mgr 组件指定。
  #   mon:
  # Monitor deployments may contain an anti-affinity rule for avoiding monitor
  # collocation on the same node. This is a required rule when host network is used
  # or when AllowMultiplePerNode is false. Otherwise this anti-affinity rule is a
  # preferred rule with weight: 50.
  #   osd:
  #    prepareosd:
  #    mgr:
  #    cleanup:
  annotations:
  #   all:
  #   mon:
  #   osd:
  #   cleanup:
  #   prepareosd:
  # clusterMetadata annotations will be applied to only `rook-ceph-mon-endpoints` configmap and the `rook-ceph-mon` and `rook-ceph-admin-keyring` secrets.
  # And clusterMetadata annotations will not be merged with `all` annotations.
  #    clusterMetadata:
  #       kubed.appscode.com/sync: "true"
  # If no mgr annotations are set, prometheus scrape annotations will be set by default.
  #   mgr:
  labels:
  #   all:
  #   mon:
  #   osd:
  #   cleanup:
  #   mgr:
  #   prepareosd:
  # monitoring is a list of key-value pairs. It is injected into all the monitoring resources created by operator.
  # These labels can be passed as LabelSelector to Prometheus
  #   monitoring:
  #   crashcollector:
  resources:
  #The requests and limits set here, allow the mgr pod to use half of one CPU core and 1 gigabyte of memory
  #   mgr:
  #     limits:
  #       cpu: "500m"
  #       memory: "1024Mi"
  #     requests:
  #       cpu: "500m"
  #       memory: "1024Mi"
  # The above example requests/limits can also be added to the other components
  #   mon:
  #   osd:
  # For OSD it also is a possible to specify requests/limits based on device class
  #   osd-hdd:
  #   osd-ssd:
  #   osd-nvme:
  #   prepareosd:
  #   mgr-sidecar:
  #   crashcollector:
  #   logcollector:
  #   cleanup:
  #   exporter:
  # The option to automatically remove OSDs that are out and are safe to destroy.
  removeOSDsIfOutAndSafeToRemove: false
  priorityClassNames:
    #all: rook-ceph-default-priority-class
    mon: system-node-critical
    osd: system-node-critical
    mgr: system-cluster-critical
    #crashcollector: rook-ceph-crashcollector-priority-class
  storage: #集群级别的存储配置和选择
    useAllNodes: true
    useAllDevices: true
    #deviceFilter:
    config:
      # crushRoot: "custom-root" # specify a non-default root label for the CRUSH map
      # metadataDevice: "md0" # specify a non-rotational storage so ceph-volume will use it as block db device of bluestore.
      # databaseSizeMB: "1024" # uncomment if the disks are smaller than 100 GB
      # osdsPerDevice: "1" # this value can be overridden at the node or device level
      # encryptedDevice: "true" # the default value for this option is "false"
    # Individual nodes and their config can be specified as well, but 'useAllNodes' above must be set to false. Then, only the named
    # nodes below will be used as storage resources.  Each node's 'name' field should match their 'kubernetes.io/hostname' label.
    # nodes:
    #   - name: "172.17.4.201"
    #     devices: # specific devices to use for storage can be specified for each node
    #       - name: "sdb"
    #       - name: "nvme01" # multiple osds can be created on high performance devices
    #         config:
    #           osdsPerDevice: "5"
    #       - name: "/dev/disk/by-id/ata-ST4000DM004-XXXX" # devices can be specified using full udev paths
    #     config: # configuration can be specified at the node level which overrides the cluster level config
    #   - name: "172.17.4.301"
    #     deviceFilter: "^sd."
    # when onlyApplyOSDPlacement is false, will merge both placement.All() and placement.osd
    onlyApplyOSDPlacement: false
    # Time for which an OSD pod will sleep before restarting, if it stopped due to flapping
    # flappingRestartIntervalHours: 24
  # The section for configuring management of daemon disruptions during upgrade or fencing.
  disruptionManagement:
    # If true, the operator will create and manage PodDisruptionBudgets for OSD, Mon, RGW, and MDS daemons. OSD PDBs are managed dynamically
    # via the strategy outlined in the [design](https://github.com/rook/rook/blob/master/design/ceph/ceph-managed-disruptionbudgets.md). The operator will
    # block eviction of OSDs by default and unblock them safely when drains are detected.
    managePodBudgets: true
    # A duration in minutes that determines how long an entire failureDomain like `region/zone/host` will be held in `noout` (in addition to the
    # default DOWN/OUT interval) when it is draining. This is only relevant when  `managePodBudgets` is `true`. The default value is `30` minutes.
    osdMaintenanceTimeout: 30
    # A duration in minutes that the operator will wait for the placement groups to become healthy (active+clean) after a drain was completed and OSDs came back up.
    # Operator will continue with the next drain if the timeout exceeds. It only works if `managePodBudgets` is `true`.
    # No values or 0 means that the operator will wait until the placement groups are healthy before unblocking the next drain.
    pgHealthCheckTimeout: 0

  # healthChecks
  # Valid values for daemons are 'mon', 'osd', 'status'
  healthCheck:
    daemonHealth:
      mon:
        disabled: false
        interval: 45s
      osd:
        disabled: false
        interval: 60s
      status:
        disabled: false
        interval: 60s
    # Change pod liveness probe timing or threshold values. Works for all mon,mgr,osd daemons.
    livenessProbe:
      mon:
        disabled: false
      mgr:
        disabled: false
      osd:
        disabled: false
    # Change pod startup probe timing or threshold values. Works for all mon,mgr,osd daemons.
    startupProbe:
      mon:
        disabled: false
      mgr:
        disabled: false
      osd:
        disabled: false

